version: "3"

vars:
  SERVER_PORT: "8080"
  BINARY_NAME: "go-lambda-api"
  LAMBDA_BINARY: "bootstrap"

tasks:
  run:
    desc: Run the API server locally
    env:
      API_KEY: "{{.API_KEY | default \"dev-api-key\"}}"
      PORT: "{{.SERVER_PORT}}"
    cmds:
      - go run ./cmd/api/main.go

  dev:
    desc: Run with hot reload using air
    cmds:
      - air

  build:
    desc: Build the binary
    cmds:
      - go build -ldflags='-s' -o bin/{{.BINARY_NAME}} ./cmd/api

  build:lambda:
    desc: Build for AWS Lambda
    cmds:
      - GOOS=linux GOARCH=amd64 go build -ldflags='-s -w' -o {{.LAMBDA_BINARY}} ./cmd/lambda

  test:
    desc: Run all tests
    cmds:
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -func=coverage.out

  fmt:check:
    desc: Check Go code formatting
    cmds:
      - test -z "$(gofmt -l .)"

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run

  mod:
    desc: Download and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  mod:update:
    desc: Update Go modules
    cmds:
      - go get -u ./...
      - go mod tidy

  mod:verify:
    desc: Verify Go module dependencies
    cmds:
      - go mod verify

  fmt:
    desc: Format Go code
    cmds:
      - gofmt -w -s .

  vuln:check:
    desc: Check for vulnerabilities using govulncheck
    deps: [docs]
    cmds:
      - govulncheck ./...
    preconditions:
      - sh: command -v govulncheck
        msg: "govulncheck is not installed. Please run: go install golang.org/x/vuln/cmd/govulncheck@latest"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf bin/
      - rm -f {{.LAMBDA_BINARY}}
      - rm -f coverage.out

  docs:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g cmd/lambda/main.go -o docs/

  docs:fmt:
    desc: Format swagger comments
    cmds:
      - swag fmt -g cmd/lambda/main.go

  docs:serve:
    desc: Serve Swagger documentation UI
    deps: [docs]
    cmds:
      - go run ./cmd/docs/main.go

  serverless:deploy:
    desc: Deploy to AWS Lambda using Serverless Framework
    dotenv: ['.env']
    deps: [build:lambda]
    cmds:
      - serverless deploy --stage {{.STAGE | default "dev"}} --region {{.REGION | default "us-west-1"}}

  serverless:remove:
    desc: Remove serverless deployment
    dotenv: ['.env']
    cmds:
      - serverless remove --stage {{.STAGE | default "dev"}} --region {{.REGION | default "us-west-1"}}

  serverless:logs:
    desc: View serverless function logs
    dotenv: ['.env']
    cmds:
      - serverless logs -f api --stage {{.STAGE | default "dev"}} --tail

  sls:deploy:
    desc: Deploy to AWS Lambda (alias for serverless:deploy)
    deps: [serverless:deploy]

  sls:remove:
    desc: Remove serverless deployment (alias for serverless:remove)
    deps: [serverless:remove]

  sls:logs:
    desc: View serverless function logs (alias for serverless:logs)
    deps: [serverless:logs]

  deploy:
    desc: Deploy to AWS Lambda (alias for serverless:deploy)
    deps: [serverless:deploy]

  logs:
    desc: View Lambda logs (alias for serverless:logs)
    deps: [serverless:logs]

  default:
    desc: Default task (format, test, build)
    deps: [fmt, test, build]
